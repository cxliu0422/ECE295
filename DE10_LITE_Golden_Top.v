// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);

wire mclk;

pll	pll_inst (
	.inclk0 (MAX10_CLK1_50),
	.c0 (mclk)
	
	);

	
top ppp(
	.mclk(mclk),
	.i_sdata(ARDUINO_IO[0]),
	.reset(SW [9]),
	.SW(SW [8:0]),
	.mmclk(ARDUINO_IO[2]),
	.o_sdout(ARDUINO_IO[3]),
	.s(ARDUINO_IO[4]),
	.lr(ARDUINO_IO[5]),
	.high(LEDR[0])

);
//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule

module top(
input mclk,
input i_sdata,
input reset,
input [8:0] SW,
output mmclk,
output o_sdout,
output s,
output lr,
output high

);
	
	wire sclk, lrclk,a,b,c,d, add, sub, am;
	assign s=sclk;
	assign lr=lrclk;
	wire [23:0] left;
	wire [23:0] right;
	wire loadR,rrready;
	wire [24:0] final1,final2,final3;
	wire add_ready1,add_ready2, add_ready3;
	
	AM u12(
	mclk,
	reset,
	am,
	i_sdata,
	final1,
	add_ready1
	);
	
	pick u11(.SW(SW),
				.reset(reset),
				.add(add), 
				.sub(sub), 
				.am(am)
				);
	
	clockdiv u10(
    .MCLK(mclk),
	 .mmclk(mmclk),
    .SCLK(sclk),
    .LRCLK(lrclk),
	 .high(high),
	 .next_sclk_rise(a),
	 .next_sclk_fall(b),
	 .next_lrclk_rise(c),
	 .next_lrclk_fall(d)
		);
		

	i2s_rx u9(.mclk(mclk),
				 .sclk(sclk),
				 .lrclk(lrclk),
				 .a(a),
				 .b(b),
				 .c(c),
				 .d(d),
				 .o_left(left),
				 .o_right(right),
				 .i_sdata(i_sdata),
				 .load(loadR),
				 .rrready(rrready)
				 
				 );
				 
	enableR (mclk,loadR);


				 
	wire [23:0] out1,out2;
	wire valid_ML;
	wire valid_MR;
	
	Mixer_L u8(
	.mclk(mclk),
   .sclk(sclk),
   .reset(reset),
	.ready(rrready),
	.i_data(left),
	.o_data(out1),
	.valid(valid_ML)
);


	Mixer_R u7(
	.mclk(mclk),
   .sclk(sclk),
   .reset(reset),
	.ready(rrready),
	.i_data(right),
	.o_data(out2),
	.valid(valid_MR)
);

	wire [23:0] sumL,sumR;
	wire valid_SL;
	wire valid_SR;

	fir_L u6(
	.clk(mclk),
	.reset(reset),
	.sample(out1),
	.ready(valid_ML),
	.sum(sumL),
	.valid(valid_SL)
);

	fir_R u5(
	.clk(mclk),
	.reset(reset),
	.sample(out2),
	.ready(valid_MR),
	.sum(sumR),
	.valid(valid_SR)
);
	wire [23:0] xierboter;
	wire valid_boterA,valid_boterB;

	xierbot u4(
	.clk(mclk),
	.reset(reset),
	.sample(sumR),
	.selectA(add),
	.selectB(sub),
	.ready(valid_SR),
	.sum(xierboter),
	.validA(valid_boterA),
	.validB(valid_boterB)
	
);
	wire [23:0] delayer;
	wire valid_delay;
	
	delay u3(
	.clk(mclk),
	.reset(reset),
	.sample(sumL),
	.ready(valid_SL),
	.sum(delayer),
	.valid(valid_delay)
);		 

	
	
	
	adder u2(
    .clk(mclk),
    .reset(reset),
    .i_valid(valid_boterA),
    .a(xieboter),
    .b(delayer),
    .o_c(final2),
    .o_valid(add_ready2)
);

sub_unit u1(
    
    .clk(mclk),
    .reset(reset),
    //input is valid
    .i_valid(valid_boterB),
	 .a(xierboter),
	.b(delayer),
    // signed so output datawidth should be [DATA_WIDTH-1+1:0]
    .o_c(final3),
    //the output is valid
    .o_valid(add_ready3)
	 //output logic [64:0][24:0] sum,
    //the module is ready to receive a new input
   
);
	 
	 wire loadT;
	 wire [23:0] last;
	 wire fR;
	 
	 enableT ttt(mclk,loadT);
	 
	 selectTop enhypen(final1, final2, final3, add_ready1,add_ready2,add_ready3, last, fR);
	 
	i2s_tx u0(.mclk(mclk),.sclk(sclk),.lrclk(lrclk),
	 .a(a),.b(b),.c(c),
	 .d(d),
	 
	 .i_ldin(last),.i_rdin(last),.o_sdout(o_sdout),.load(loadT),.rrready(fR));
	 
	 
	
	 
	 



endmodule